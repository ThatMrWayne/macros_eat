name: Deploy to production

on:
  push:
    branches:
      - main


jobs:

  continuous-integration:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4


    - name: Create production config for Django
      run: |
        cat > macroseat/production.cfg << EOF
        [general]
        DEBUG: False
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        ALLOWED_HOSTS: [".macroseat.online"]
        TIMEZONE: Asia/Taipei
        CORS_ALLOWED_ORIGINS: ["https://*.macroseat.online"]
        CSRF_TRUSTED_ORIGINS: ["https://*.macroseat.online"]
        [databases]
        NAME: ${{ secrets.DB_NAME }}
        ENGINE: django.db.backends.postgresql
        USER: ${{ secrets.DB_USER }}
        HOST: ${{ secrets.DB_HOST }}
        PASSWORD: ${{ secrets.DB_PASSWORD }}
        PORT: ${{ secrets.DB_PORT }}
        [cache]
        CACHE_LOCATION: ${{ secrets.CACHE_LOCATION }}
        DEFAULT_CLIENT_CLASS: django_redis.client.default.DefaultClient
        EOF


    - name: Create production config for Nginx
      run: |
        echo "${{ secrets.NGINX_PROD_CONF }}" > nginx_prod.conf


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        PGPORT: ${{ secrets.DB_PORT }}
      run: |
        docker compose -f ./docker_compose/docker-compose-prod.yml build pg
        docker compose -f ./docker_compose/docker-compose-prod.yml build django-server
        docker compose -f ./docker_compose/docker-compose-prod.yml build nginx

        docker push $ECR_REGISTRY/macroseat-django:latest
        docker push $ECR_REGISTRY/macroseat-postgres:latest
        docker push $ECR_REGISTRY/macroseat-nginx:latest


  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEPLOY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEPLOY }}
        aws-region: us-east-1


    - name: Create CodeDeploy Deployment
      id: deploy
      run: |
        aws deploy create-deployment \
          --application-name macroseat_application \
          --deployment-group-name deployment_group_new_macroseat \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --github-location repository=${{ github.repository }},commitId=${{ github.sha }}